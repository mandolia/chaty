import React, { useState } from 'react';
import PinInput from 'react-pin-input';
import * as Style from './style';
import ChatIcon from '../../../Illustration/Chat.svg';
import More from '../../../Illustration/More.svg';
import Model from '../../Model';
import SortInput from '../../UI/ProfilSelector';
import FooterButton from '../../UI/FooterButton';
import Picture from '../../../Illustration/Henry.png';
import Time from '../Time.json';
import useUserName from '../../../hooks/useUserName';

const TeamChatCard = (props) => {
  const {
    next, NextCode, AddContactToTeamChat,
    MyTeamChatNotification, ConfirmationModel,
    step, id, me, picture, goToFirstStep, name, PictureView, GoToPrivateRoom, teamChatContact, detail,
  } = props;
  const [contactId, setContactId] = useState('')
  const [userName1] = useUserName(id)
  const [myName] = useUserName(me.id)
  const [duration, setDuration] = useState('')
  const [receiveName] = useUserName(contactId)
  const [code, setCode] = useState('')
  const [time, setTime] = useState('')
  const [open, setOpen] = useState(false);
  const [pin, setPin] = useState({
    1: '', 2: '', 3: '', 4: '',
  });
  const [ConfirmationPin, setConfirmationPin] = useState({
    1: '', 2: '', 3: '', 4: '',
  });

  const handleCloseModal = () => {
    setOpen(false);
    document.body.style.overflow = 'scroll';
  };

  // Teamchat
  const handleChange = (selectedTime) => {
    setTime(selectedTime)
  }

  const Card = () => {
    switch (step) {
      case 1:
        return (
          <Style.CardTemModel>
            <Style.CardWrapper>
              <h1>Welcome to Temporary Chat</h1>
              <span>Select your duration for Temporary chat</span>
              <SortInput
                value={time}
                onChange={handleChange}
                options={Time}
                width="275px"
                border="1px solid #4A4A4A" />
              <FooterButton onClick={() => next(id, time)}>Generate PIn</FooterButton>
            </Style.CardWrapper>
          </Style.CardTemModel>
        );
      case 2:
        return (
          <Style.CardTemModel>
            <Style.CardWrapper>
              <span>
                Please Create Pin and Share
                with {userName1} & Enjoy Messanger
                Services on Enjoee
              </span>
              <PinInput
                length={4}
                value={pin}
                secret
                onChange={(value, index) => setPin((prev) => ({ ...prev, [index]: value }))}
                type="numeric"
                inputMode="number"
                style={{ width: '275px', height: '40px' }}
                inputStyle={{ borderRadius: '5px', borderColor: '#47525D', height: '100%' }}
                inputFocusStyle={{ borderColor: 'blue' }}
                onComplete={(value, index) => setPin((prev) => ({ ...prev, [index]: value }))}
                autoSelect
                regexCriteria={/^[ A-Za-z0-9_@./#&+-]*$/}
              />
              <FooterButton onClick={() => NextCode(id, pin[3], setOpen)}>Send</FooterButton>
            </Style.CardWrapper>
          </Style.CardTemModel>
        );
      case 3:
        return (
          <Style.CardTemModel>
            <Style.CardWrapper>
              <span>
                Hello, {myName}, please enter this code {code},
                  generated by {receiveName} for temporary chat
                enjoee messagner service on ENJOEE
              </span>
              <PinInput
                length={4}
                secret
                onChange={(value, index) => setConfirmationPin((prev) => ({ ...prev, [index]: value }))}
                type="numeric"
                inputMode="number"
                style={{ width: '275px', height: '40px' }}
                inputStyle={{ borderRadius: '5px', borderColor: '#47525D', height: '100%' }}
                inputFocusStyle={{ borderColor: 'blue' }}
                onComplete={(value, index) => setConfirmationPin((prev) => ({ ...prev, [index]: value }))}
                autoSelect
                regexCriteria={/^[ A-Za-z0-9_@./#&+-]*$/}
              />
              <FooterButton onClick={() => {
                if (ConfirmationPin[3] === code) {
                  AddContactToTeamChat(contactId, duration, ConfirmationPin[3], setOpen)
                  GoToPrivateRoom(id)
                } else {
                  alert('incorrect code')
                }
              }}>Done</FooterButton>
            </Style.CardWrapper>
          </Style.CardTemModel>
        );
      default: return null;
    }
  };

  const handleDurationModal = () => {
    if (MyTeamChatNotification.length > 0) {
      (MyTeamChatNotification.every(contact => {
        if (contact.id === id) {
          setContactId(contact.id)
          setCode(contact.codeConfirmation)
          setDuration(contact.duration)
          ConfirmationModel()
          setOpen(true);
        } else {
          goToFirstStep()
          setOpen(true)
        }
      }))
    } else {
      if (teamChatContact.length > 0) {
        teamChatContact.every(contact => {
          if (contact.contactId !== id) {
            goToFirstStep()
            setOpen(true)
          }
        })
      } else {
        goToFirstStep()
        setOpen(true)
      }
    }
  };

  const handleLeftDuration = () => {

    if (teamChatContact.length > 0) {
      return teamChatContact.map(contact => {
        if (contact.contactId === id) {
          return <>
            <div id="time">{contact.duration} Left</div>
            <img alt="chat" src={ChatIcon} onClick={() => GoToPrivateRoom(id)} />
          </>
        } else {
          return <img alt="chat" src={ChatIcon} onClick={() => handleDurationModal()} />
        }
      })
    } else {
      return <img alt="chat" src={ChatIcon} onClick={() => handleDurationModal()} />

    }
  }

  return (
    <>
      <Model
        onClose={handleCloseModal}
        open={open}
      >
        {Card()}
      </Model>
      <Style.Wrapper>
        <Style.CardContainer>
          <div onClick={() => handleDurationModal()}>
            {PictureView ? picture ? <img alt="profil" className="profil" src={picture} /> :
              <img alt="profil" className="profil" src={Picture} /> : null}
          </div>
          <Style.Description>
            <Style.PersonalInfo>
              <h1>{name}</h1>
              <span>{detail}</span>
            </Style.PersonalInfo>
            <Style.IconContainer>
              {handleLeftDuration()}
              <img alt="more" src={More} />
            </Style.IconContainer>
          </Style.Description>
        </Style.CardContainer>
      </Style.Wrapper>

    </>
  );
};

export default TeamChatCard;
